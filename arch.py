
import sys
from torch import cat, add, nn

def kaiming_w_init(layer):
    nn.init.kaiming_normal_(layer.weight)


class mVGGBlock(nn.Module):
    def __init__(self, in_channels, mid_channels, out_channels):
        super().__init__()
        self.relu = nn.ReLU() 
        self.conv1 = nn.Conv2d(in_channels, mid_channels, kernel_size=3, stride=1, padding=1, padding_mode='zeros')
        self.bn1 = nn.BatchNorm2d(mid_channels) 
        self.conv2 = nn.Conv2d(mid_channels, out_channels, kernel_size=3, stride=1, padding=1, padding_mode='zeros')
        self.bn2 = nn.BatchNorm2d(out_channels) 
        kaiming_w_init(self.conv1)
        kaiming_w_init(self.conv2)
        
    def forward(self, x):
        x = self.conv1(x) 
        x = self.bn1(x)
        x = self.relu(x)
        x = self.conv2(x)
        x = self.bn2(x)
        x = self.relu(x)
        return x


class VGGBlock(nn.Module):
    def __init__(self, in_channels, mid_channels, out_channels):
        super().__init__()
        self.relu = nn.ReLU()
        self.conv1 = nn.Conv2d(in_channels, mid_channels, kernel_size=3, stride=1, padding=1, padding_mode='zeros')
        self.bn1 = nn.BatchNorm2d(mid_channels)
        self.conv2 = nn.Conv2d(mid_channels, mid_channels, kernel_size=3, stride=1, padding=1, padding_mode='zeros')
        self.bn2 = nn.BatchNorm2d(mid_channels) 
        self.conv3 = nn.Conv2d(mid_channels, out_channels, kernel_size=3, stride=1, padding=1, padding_mode='zeros')
        self.bn3 = nn.BatchNorm2d(out_channels)
        kaiming_w_init(self.conv1)
        kaiming_w_init(self.conv2)
        kaiming_w_init(self.conv3)

    def forward(self, x):
        x = self.conv1(x) 
        x = self.bn1(x)
        x = self.relu(x)
        x = self.conv2(x)
        x = self.bn2(x)
        x = self.relu(x)
        x = self.conv3(x)
        x = self.bn3(x)
        x = self.relu(x) 
        return x



class A0(nn.Module):
    def __init__(self, n_class=6, n_fmap_ch=[8, 16, 32, 64, 128], in_channel_dim=[2,3]):
        super().__init__()
        self.drop = nn.Dropout(p=0.5)
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2, padding=0) 
        self.up = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        #DVS
        self.conv0_0_bgr_f = mVGGBlock(in_channel_dim[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_0_bgr_l = mVGGBlock(in_channel_dim[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_0_bgr_ri = mVGGBlock(in_channel_dim[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_0_bgr_r = mVGGBlock(in_channel_dim[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv1_0_bgr_f = mVGGBlock(n_fmap_ch[0], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_0_bgr_l = mVGGBlock(n_fmap_ch[0], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_0_bgr_ri = mVGGBlock(n_fmap_ch[0], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_0_bgr_r = mVGGBlock(n_fmap_ch[0], n_fmap_ch[1], n_fmap_ch[1])
        self.conv2_0_bgr_f = mVGGBlock(n_fmap_ch[1], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_0_bgr_l = mVGGBlock(n_fmap_ch[1], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_0_bgr_ri = mVGGBlock(n_fmap_ch[1], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_0_bgr_r = mVGGBlock(n_fmap_ch[1], n_fmap_ch[2], n_fmap_ch[2])
        #BOTTLENECK
        self.conv3_0_bgr = VGGBlock(4*n_fmap_ch[2], n_fmap_ch[3], n_fmap_ch[3])
        self.conv_neck = VGGBlock(n_fmap_ch[3], n_fmap_ch[4], n_fmap_ch[4])
        self.conv3_0_dep = VGGBlock(n_fmap_ch[3]+n_fmap_ch[4], n_fmap_ch[3], n_fmap_ch[3])
        self.conv3_0_seg = VGGBlock(n_fmap_ch[3]+n_fmap_ch[4], n_fmap_ch[3], n_fmap_ch[3])
        #DE
        self.conv2_1_dep_f = mVGGBlock(n_fmap_ch[2]+n_fmap_ch[3], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_1_dep_l = mVGGBlock(n_fmap_ch[2]+n_fmap_ch[3], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_1_dep_ri = mVGGBlock(n_fmap_ch[2]+n_fmap_ch[3], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_1_dep_r = mVGGBlock(n_fmap_ch[2]+n_fmap_ch[3], n_fmap_ch[2], n_fmap_ch[2])
        self.conv1_2_dep_f = mVGGBlock(n_fmap_ch[1]+n_fmap_ch[2], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_2_dep_l = mVGGBlock(n_fmap_ch[1]+n_fmap_ch[2], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_2_dep_ri = mVGGBlock(n_fmap_ch[1]+n_fmap_ch[2], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_2_dep_r = mVGGBlock(n_fmap_ch[1]+n_fmap_ch[2], n_fmap_ch[1], n_fmap_ch[1])
        self.conv0_3_dep_f = mVGGBlock(n_fmap_ch[0]+n_fmap_ch[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_3_dep_l = mVGGBlock(n_fmap_ch[0]+n_fmap_ch[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_3_dep_ri = mVGGBlock(n_fmap_ch[0]+n_fmap_ch[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_3_dep_r = mVGGBlock(n_fmap_ch[0]+n_fmap_ch[1], n_fmap_ch[0], n_fmap_ch[0])
        #SS
        self.conv2_1_seg_f = mVGGBlock(n_fmap_ch[2]+n_fmap_ch[3], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_1_seg_l = mVGGBlock(n_fmap_ch[2]+n_fmap_ch[3], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_1_seg_ri = mVGGBlock(n_fmap_ch[2]+n_fmap_ch[3], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_1_seg_r = mVGGBlock(n_fmap_ch[2]+n_fmap_ch[3], n_fmap_ch[2], n_fmap_ch[2])
        self.conv1_2_seg_f = mVGGBlock(n_fmap_ch[1]+n_fmap_ch[2], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_2_seg_l = mVGGBlock(n_fmap_ch[1]+n_fmap_ch[2], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_2_seg_ri = mVGGBlock(n_fmap_ch[1]+n_fmap_ch[2], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_2_seg_r = mVGGBlock(n_fmap_ch[1]+n_fmap_ch[2], n_fmap_ch[1], n_fmap_ch[1])
        self.conv0_3_seg_f = mVGGBlock(n_fmap_ch[0]+n_fmap_ch[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_3_seg_l = mVGGBlock(n_fmap_ch[0]+n_fmap_ch[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_3_seg_ri = mVGGBlock(n_fmap_ch[0]+n_fmap_ch[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_3_seg_r = mVGGBlock(n_fmap_ch[0]+n_fmap_ch[1], n_fmap_ch[0], n_fmap_ch[0])
        #final 1x1 conv
        self.final_dep_f = nn.Conv2d(n_fmap_ch[0], 1, kernel_size=1)
        self.final_dep_l = nn.Conv2d(n_fmap_ch[0], 1, kernel_size=1)
        self.final_dep_ri = nn.Conv2d(n_fmap_ch[0], 1, kernel_size=1)
        self.final_dep_r = nn.Conv2d(n_fmap_ch[0], 1, kernel_size=1)
        self.final_seg_f = nn.Conv2d(n_fmap_ch[0], n_class, kernel_size=1)
        self.final_seg_l = nn.Conv2d(n_fmap_ch[0], n_class, kernel_size=1)
        self.final_seg_ri = nn.Conv2d(n_fmap_ch[0], n_class, kernel_size=1)
        self.final_seg_r = nn.Conv2d(n_fmap_ch[0], n_class, kernel_size=1)
        kaiming_w_init(self.final_dep_f)
        kaiming_w_init(self.final_dep_l)
        kaiming_w_init(self.final_dep_ri)
        kaiming_w_init(self.final_dep_r)
        kaiming_w_init(self.final_seg_f)
        kaiming_w_init(self.final_seg_l)
        kaiming_w_init(self.final_seg_ri)
        kaiming_w_init(self.final_seg_r)
        #final activation
        self.act_dep = nn.ReLU()
        self.act_seg = nn.Sigmoid()
       
    def forward(self, input):
        #down
        bgr_f_0_0 = self.conv0_0_bgr_f(input[4])
        bgr_l_0_0 = self.conv0_0_bgr_l(input[5])
        bgr_ri_0_0 = self.conv0_0_bgr_ri(input[6])
        bgr_r_0_0 = self.conv0_0_bgr_r(input[7])
        down_bgr_f_0_0 = self.pool(bgr_f_0_0)
        down_bgr_l_0_0 = self.pool(bgr_l_0_0)
        down_bgr_ri_0_0 = self.pool(bgr_ri_0_0)
        down_bgr_r_0_0 = self.pool(bgr_r_0_0)
        bgr_f_1_0 = self.conv1_0_bgr_f(down_bgr_f_0_0)
        bgr_l_1_0 = self.conv1_0_bgr_l(down_bgr_l_0_0)
        bgr_ri_1_0 = self.conv1_0_bgr_ri(down_bgr_ri_0_0)
        bgr_r_1_0 = self.conv1_0_bgr_r(down_bgr_r_0_0)
        down_bgr_f_1_0 = self.pool(bgr_f_1_0)
        down_bgr_l_1_0 = self.pool(bgr_l_1_0)
        down_bgr_ri_1_0 = self.pool(bgr_ri_1_0)
        down_bgr_r_1_0 = self.pool(bgr_r_1_0)
        bgr_f_2_0 = self.conv2_0_bgr_f(down_bgr_f_1_0)
        bgr_l_2_0 = self.conv2_0_bgr_l(down_bgr_l_1_0)
        bgr_ri_2_0 = self.conv2_0_bgr_ri(down_bgr_ri_1_0)
        bgr_r_2_0 = self.conv2_0_bgr_r(down_bgr_r_1_0)
        down_bgr_f_2_0 = self.pool(bgr_f_2_0)
        down_bgr_l_2_0 = self.pool(bgr_l_2_0)
        down_bgr_ri_2_0 = self.pool(bgr_ri_2_0)
        down_bgr_r_2_0 = self.pool(bgr_r_2_0)

        #neck
        cat_in_bgr = cat([down_bgr_f_2_0, down_bgr_l_2_0, down_bgr_ri_2_0, down_bgr_r_2_0], dim=1)
        bgr_3_0 = self.drop(self.conv3_0_bgr(cat_in_bgr))
        down_bgr_3_0 = self.pool(bgr_3_0) 
        neckfm = self.drop(self.conv_neck(down_bgr_3_0))
        up_neck = self.up(neckfm)      
        dep_3_0 = self.drop(self.conv3_0_dep(cat([up_neck, bgr_3_0], dim=1)))
        seg_3_0 = self.drop(self.conv3_0_seg(cat([up_neck, bgr_3_0], dim=1)))
        up_dep_3_0 = self.up(dep_3_0)
        up_seg_3_0 = self.up(seg_3_0)

        #up
        dep_f_2_1 = self.conv2_1_dep_f(cat([up_dep_3_0, bgr_f_2_0], dim=1))
        dep_l_2_1 = self.conv2_1_dep_l(cat([up_dep_3_0, bgr_l_2_0], dim=1))
        dep_ri_2_1 = self.conv2_1_dep_ri(cat([up_dep_3_0, bgr_ri_2_0], dim=1))
        dep_r_2_1 = self.conv2_1_dep_r(cat([up_dep_3_0, bgr_r_2_0], dim=1))
        seg_f_2_1 = self.conv2_1_seg_f(cat([up_seg_3_0, bgr_f_2_0], dim=1))
        seg_l_2_1 = self.conv2_1_seg_l(cat([up_seg_3_0, bgr_l_2_0], dim=1))
        seg_ri_2_1 = self.conv2_1_seg_ri(cat([up_seg_3_0, bgr_ri_2_0], dim=1))
        seg_r_2_1 = self.conv2_1_seg_r(cat([up_seg_3_0, bgr_r_2_0], dim=1))
        up_dep_f_2_1 = self.up(dep_f_2_1)
        up_dep_l_2_1 = self.up(dep_l_2_1)
        up_dep_ri_2_1 = self.up(dep_ri_2_1)
        up_dep_r_2_1 = self.up(dep_r_2_1)
        up_seg_f_2_1 = self.up(seg_f_2_1)
        up_seg_l_2_1 = self.up(seg_l_2_1)
        up_seg_ri_2_1 = self.up(seg_ri_2_1)
        up_seg_r_2_1 = self.up(seg_r_2_1)
        dep_f_1_2 = self.conv1_2_dep_f(cat([up_dep_f_2_1, bgr_f_1_0], dim=1))
        dep_l_1_2 = self.conv1_2_dep_l(cat([up_dep_l_2_1, bgr_l_1_0], dim=1))
        dep_ri_1_2 = self.conv1_2_dep_ri(cat([up_dep_ri_2_1, bgr_ri_1_0], dim=1))
        dep_r_1_2 = self.conv1_2_dep_r(cat([up_dep_r_2_1, bgr_r_1_0], dim=1))
        seg_f_1_2 = self.conv1_2_seg_f(cat([up_seg_f_2_1, bgr_f_1_0], dim=1))
        seg_l_1_2 = self.conv1_2_seg_l(cat([up_seg_l_2_1, bgr_l_1_0], dim=1))
        seg_ri_1_2 = self.conv1_2_seg_ri(cat([up_seg_ri_2_1, bgr_ri_1_0], dim=1))
        seg_r_1_2 = self.conv1_2_seg_r(cat([up_seg_r_2_1, bgr_r_1_0], dim=1))
        up_dep_f_1_2 = self.up(dep_f_1_2)
        up_dep_l_1_2 = self.up(dep_l_1_2)
        up_dep_ri_1_2 = self.up(dep_ri_1_2)
        up_dep_r_1_2 = self.up(dep_r_1_2)
        up_seg_f_1_2 = self.up(seg_f_1_2)
        up_seg_l_1_2 = self.up(seg_l_1_2)
        up_seg_ri_1_2 = self.up(seg_ri_1_2)
        up_seg_r_1_2 = self.up(seg_r_1_2)
        dep_f_0_3 = self.conv0_3_dep_f(cat([up_dep_f_1_2, bgr_f_0_0], dim=1))
        dep_l_0_3 = self.conv0_3_dep_l(cat([up_dep_l_1_2, bgr_l_0_0], dim=1))
        dep_ri_0_3 = self.conv0_3_dep_ri(cat([up_dep_ri_1_2, bgr_ri_0_0], dim=1))
        dep_r_0_3 = self.conv0_3_dep_r(cat([up_dep_r_1_2, bgr_r_0_0], dim=1))
        seg_f_0_3 = self.conv0_3_seg_f(cat([up_seg_f_1_2, bgr_f_0_0], dim=1))
        seg_l_0_3 = self.conv0_3_seg_l(cat([up_seg_l_1_2, bgr_l_0_0], dim=1))
        seg_ri_0_3 = self.conv0_3_seg_ri(cat([up_seg_ri_1_2, bgr_ri_0_0], dim=1))
        seg_r_0_3 = self.conv0_3_seg_r(cat([up_seg_r_1_2, bgr_r_0_0], dim=1))

        #final
        out_dep_f = self.act_dep(self.final_dep_f(dep_f_0_3))
        out_dep_l = self.act_dep(self.final_dep_l(dep_l_0_3))
        out_dep_ri = self.act_dep(self.final_dep_ri(dep_ri_0_3))
        out_dep_r = self.act_dep(self.final_dep_r(dep_r_0_3))
        out_seg_f = self.act_seg(self.final_seg_f(seg_f_0_3))
        out_seg_l = self.act_seg(self.final_seg_l(seg_l_0_3))
        out_seg_ri = self.act_seg(self.final_seg_ri(seg_ri_0_3))
        out_seg_r = self.act_seg(self.final_seg_r(seg_r_0_3))


        return [out_dep_f, out_dep_l, out_dep_ri, out_dep_r, out_seg_f, out_seg_l, out_seg_ri, out_seg_r]


class A1(nn.Module):
    def __init__(self, n_class=6, n_fmap_ch=[8, 16, 32, 64, 128], in_channel_dim=[2,3]):
        super().__init__()

        self.drop = nn.Dropout(p=0.5)
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2, padding=0) 
        self.up = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        #DVS
        self.conv0_0_dvs_f = mVGGBlock(in_channel_dim[0], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_0_dvs_l = mVGGBlock(in_channel_dim[0], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_0_dvs_ri = mVGGBlock(in_channel_dim[0], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_0_dvs_r = mVGGBlock(in_channel_dim[0], n_fmap_ch[0], n_fmap_ch[0])
        self.conv1_0_dvs_f = mVGGBlock(n_fmap_ch[0], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_0_dvs_l = mVGGBlock(n_fmap_ch[0], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_0_dvs_ri = mVGGBlock(n_fmap_ch[0], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_0_dvs_r = mVGGBlock(n_fmap_ch[0], n_fmap_ch[1], n_fmap_ch[1])
        self.conv2_0_dvs_f = mVGGBlock(n_fmap_ch[1], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_0_dvs_l = mVGGBlock(n_fmap_ch[1], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_0_dvs_ri = mVGGBlock(n_fmap_ch[1], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_0_dvs_r = mVGGBlock(n_fmap_ch[1], n_fmap_ch[2], n_fmap_ch[2])
        #BGR
        self.conv0_0_bgr_f = mVGGBlock(in_channel_dim[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_0_bgr_l = mVGGBlock(in_channel_dim[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_0_bgr_ri = mVGGBlock(in_channel_dim[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_0_bgr_r = mVGGBlock(in_channel_dim[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv1_0_bgr_f = mVGGBlock(n_fmap_ch[0], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_0_bgr_l = mVGGBlock(n_fmap_ch[0], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_0_bgr_ri = mVGGBlock(n_fmap_ch[0], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_0_bgr_r = mVGGBlock(n_fmap_ch[0], n_fmap_ch[1], n_fmap_ch[1])
        self.conv2_0_bgr_f = mVGGBlock(n_fmap_ch[1], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_0_bgr_l = mVGGBlock(n_fmap_ch[1], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_0_bgr_ri = mVGGBlock(n_fmap_ch[1], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_0_bgr_r = mVGGBlock(n_fmap_ch[1], n_fmap_ch[2], n_fmap_ch[2])
        #BOTTLENECK
        self.conv3_0_dvs = catall_Block((4*n_fmap_ch[2]), n_fmap_ch[3], n_fmap_ch[3])
        self.conv3_0_bgr = VGGBlock(4*n_fmap_ch[2], n_fmap_ch[3], n_fmap_ch[3])
        self.conv_neck = VGGBlock(2*n_fmap_ch[3], n_fmap_ch[4], n_fmap_ch[4])
        self.conv3_0_dep = VGGBlock(n_fmap_ch[3]+n_fmap_ch[4], n_fmap_ch[3], n_fmap_ch[3])
        self.conv3_0_seg = VGGBlock(n_fmap_ch[3]+n_fmap_ch[4], n_fmap_ch[3], n_fmap_ch[3])
        #DE
        self.conv2_1_dep_f = mVGGBlock(n_fmap_ch[2]+n_fmap_ch[3], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_1_dep_l = mVGGBlock(n_fmap_ch[2]+n_fmap_ch[3], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_1_dep_ri = mVGGBlock(n_fmap_ch[2]+n_fmap_ch[3], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_1_dep_r = mVGGBlock(n_fmap_ch[2]+n_fmap_ch[3], n_fmap_ch[2], n_fmap_ch[2])
        self.conv1_2_dep_f = mVGGBlock(n_fmap_ch[1]+n_fmap_ch[2], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_2_dep_l = mVGGBlock(n_fmap_ch[1]+n_fmap_ch[2], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_2_dep_ri = mVGGBlock(n_fmap_ch[1]+n_fmap_ch[2], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_2_dep_r = mVGGBlock(n_fmap_ch[1]+n_fmap_ch[2], n_fmap_ch[1], n_fmap_ch[1])
        self.conv0_3_dep_f = mVGGBlock(n_fmap_ch[0]+n_fmap_ch[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_3_dep_l = mVGGBlock(n_fmap_ch[0]+n_fmap_ch[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_3_dep_ri = mVGGBlock(n_fmap_ch[0]+n_fmap_ch[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_3_dep_r = mVGGBlock(n_fmap_ch[0]+n_fmap_ch[1], n_fmap_ch[0], n_fmap_ch[0])
        #SS
        self.conv2_1_seg_f = mVGGBlock(n_fmap_ch[2]+n_fmap_ch[3], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_1_seg_l = mVGGBlock(n_fmap_ch[2]+n_fmap_ch[3], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_1_seg_ri = mVGGBlock(n_fmap_ch[2]+n_fmap_ch[3], n_fmap_ch[2], n_fmap_ch[2])
        self.conv2_1_seg_r = mVGGBlock(n_fmap_ch[2]+n_fmap_ch[3], n_fmap_ch[2], n_fmap_ch[2])
        self.conv1_2_seg_f = mVGGBlock(n_fmap_ch[1]+n_fmap_ch[2], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_2_seg_l = mVGGBlock(n_fmap_ch[1]+n_fmap_ch[2], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_2_seg_ri = mVGGBlock(n_fmap_ch[1]+n_fmap_ch[2], n_fmap_ch[1], n_fmap_ch[1])
        self.conv1_2_seg_r = mVGGBlock(n_fmap_ch[1]+n_fmap_ch[2], n_fmap_ch[1], n_fmap_ch[1])
        self.conv0_3_seg_f = mVGGBlock(n_fmap_ch[0]+n_fmap_ch[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_3_seg_l = mVGGBlock(n_fmap_ch[0]+n_fmap_ch[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_3_seg_ri = mVGGBlock(n_fmap_ch[0]+n_fmap_ch[1], n_fmap_ch[0], n_fmap_ch[0])
        self.conv0_3_seg_r = mVGGBlock(n_fmap_ch[0]+n_fmap_ch[1], n_fmap_ch[0], n_fmap_ch[0])
        #final 1x1 conv
        self.final_dep_f = nn.Conv2d(n_fmap_ch[0], 1, kernel_size=1)
        self.final_dep_l = nn.Conv2d(n_fmap_ch[0], 1, kernel_size=1)
        self.final_dep_ri = nn.Conv2d(n_fmap_ch[0], 1, kernel_size=1)
        self.final_dep_r = nn.Conv2d(n_fmap_ch[0], 1, kernel_size=1)
        self.final_seg_f = nn.Conv2d(n_fmap_ch[0], n_class, kernel_size=1)
        self.final_seg_l = nn.Conv2d(n_fmap_ch[0], n_class, kernel_size=1)
        self.final_seg_ri = nn.Conv2d(n_fmap_ch[0], n_class, kernel_size=1)
        self.final_seg_r = nn.Conv2d(n_fmap_ch[0], n_class, kernel_size=1)
        kaiming_w_init(self.final_dep_f)
        kaiming_w_init(self.final_dep_l)
        kaiming_w_init(self.final_dep_ri)
        kaiming_w_init(self.final_dep_r)
        kaiming_w_init(self.final_seg_f)
        kaiming_w_init(self.final_seg_l)
        kaiming_w_init(self.final_seg_ri)
        kaiming_w_init(self.final_seg_r)
        #final activation
        self.act_dep = nn.ReLU()
        self.act_seg = nn.Sigmoid()
        

    def forward(self, input):
        #down
        dvs_f_0_0 = self.conv0_0_dvs_f(input[0])
        dvs_l_0_0 = self.conv0_0_dvs_l(input[1])
        dvs_ri_0_0 = self.conv0_0_dvs_ri(input[2])
        dvs_r_0_0 = self.conv0_0_dvs_r(input[3])
        bgr_f_0_0 = self.conv0_0_bgr_f(input[4])
        bgr_l_0_0 = self.conv0_0_bgr_l(input[5])
        bgr_ri_0_0 = self.conv0_0_bgr_ri(input[6])
        bgr_r_0_0 = self.conv0_0_bgr_r(input[7])
        down_dvs_f_0_0 = self.pool(dvs_f_0_0)
        down_dvs_l_0_0 = self.pool(dvs_l_0_0)
        down_dvs_ri_0_0 = self.pool(dvs_ri_0_0)
        down_dvs_r_0_0 = self.pool(dvs_r_0_0)
        down_bgr_f_0_0 = self.pool(bgr_f_0_0)
        down_bgr_l_0_0 = self.pool(bgr_l_0_0)
        down_bgr_ri_0_0 = self.pool(bgr_ri_0_0)
        down_bgr_r_0_0 = self.pool(bgr_r_0_0)
        dvs_f_1_0 = self.conv1_0_dvs_f(down_dvs_f_0_0)
        dvs_l_1_0 = self.conv1_0_dvs_l(down_dvs_l_0_0)
        dvs_ri_1_0 = self.conv1_0_dvs_ri(down_dvs_ri_0_0)
        dvs_r_1_0 = self.conv1_0_dvs_r(down_dvs_r_0_0)
        bgr_f_1_0 = self.conv1_0_bgr_f(down_bgr_f_0_0)
        bgr_l_1_0 = self.conv1_0_bgr_l(down_bgr_l_0_0)
        bgr_ri_1_0 = self.conv1_0_bgr_ri(down_bgr_ri_0_0)
        bgr_r_1_0 = self.conv1_0_bgr_r(down_bgr_r_0_0)
        down_dvs_f_1_0 = self.pool(dvs_f_1_0)
        down_dvs_l_1_0 = self.pool(dvs_l_1_0)
        down_dvs_ri_1_0 = self.pool(dvs_ri_1_0)
        down_dvs_r_1_0 = self.pool(dvs_r_1_0)
        down_bgr_f_1_0 = self.pool(bgr_f_1_0)
        down_bgr_l_1_0 = self.pool(bgr_l_1_0)
        down_bgr_ri_1_0 = self.pool(bgr_ri_1_0)
        down_bgr_r_1_0 = self.pool(bgr_r_1_0)
        dvs_f_2_0 = self.conv2_0_dvs_f(down_dvs_f_1_0)
        dvs_l_2_0 = self.conv2_0_dvs_l(down_dvs_l_1_0)
        dvs_ri_2_0 = self.conv2_0_dvs_ri(down_dvs_ri_1_0)
        dvs_r_2_0 = self.conv2_0_dvs_r(down_dvs_r_1_0)
        bgr_f_2_0 = self.conv2_0_bgr_f(down_bgr_f_1_0)
        bgr_l_2_0 = self.conv2_0_bgr_l(down_bgr_l_1_0)
        bgr_ri_2_0 = self.conv2_0_bgr_ri(down_bgr_ri_1_0)
        bgr_r_2_0 = self.conv2_0_bgr_r(down_bgr_r_1_0)
        down_dvs_f_2_0 = self.pool(dvs_f_2_0)
        down_dvs_l_2_0 = self.pool(dvs_l_2_0)
        down_dvs_ri_2_0 = self.pool(dvs_ri_2_0)
        down_dvs_r_2_0 = self.pool(dvs_r_2_0)
        down_bgr_f_2_0 = self.pool(bgr_f_2_0)
        down_bgr_l_2_0 = self.pool(bgr_l_2_0)
        down_bgr_ri_2_0 = self.pool(bgr_ri_2_0)
        down_bgr_r_2_0 = self.pool(bgr_r_2_0)

        #NECK
        cat_in_dvs = cat([down_dvs_f_2_0, down_dvs_l_2_0, down_dvs_ri_2_0, down_dvs_r_2_0], dim=1)
        cat_in_bgr = cat([down_bgr_f_2_0, down_bgr_l_2_0, down_bgr_ri_2_0, down_bgr_r_2_0], dim=1)
        dvs_3_0 = self.drop(self.conv3_0_dvs(cat_in_dvs))
        bgr_3_0 = self.drop(self.conv3_0_bgr(cat_in_bgr))
        down_dvs_3_0 = self.pool(dvs_3_0) 
        down_bgr_3_0 = self.pool(bgr_3_0) 
        cat_in_dvsbgr = cat([down_dvs_3_0, down_bgr_3_0], dim=1)
        neckfm = self.drop(self.conv_neck(cat_in_dvsbgr))
        up_neck = self.up(neckfm)        
        dep_3_0 = self.drop(self.conv3_0_dep(cat([up_neck, dvs_3_0, bgr_3_0], dim=1)))
        seg_3_0 = self.drop(self.conv3_0_seg(cat([up_neck, dvs_3_0, bgr_3_0], dim=1)))
        up_dep_3_0 = self.up(dep_3_0)
        up_seg_3_0 = self.up(seg_3_0)

        #up
        dep_f_2_1 = self.conv2_1_dep_f(cat([up_dep_3_0, dvs_f_2_0, bgr_f_2_0], dim=1))
        dep_l_2_1 = self.conv2_1_dep_l(cat([up_dep_3_0, dvs_l_2_0, bgr_l_2_0], dim=1))
        dep_ri_2_1 = self.conv2_1_dep_ri(cat([up_dep_3_0, dvs_ri_2_0, bgr_ri_2_0], dim=1))
        dep_r_2_1 = self.conv2_1_dep_r(cat([up_dep_3_0, dvs_r_2_0, bgr_r_2_0], dim=1))
        seg_f_2_1 = self.conv2_1_seg_f(cat([up_seg_3_0, dvs_f_2_0, bgr_f_2_0], dim=1))
        seg_l_2_1 = self.conv2_1_seg_l(cat([up_seg_3_0, dvs_l_2_0, bgr_l_2_0], dim=1))
        seg_ri_2_1 = self.conv2_1_seg_ri(cat([up_seg_3_0, dvs_ri_2_0, bgr_ri_2_0], dim=1))
        seg_r_2_1 = self.conv2_1_seg_r(cat([up_seg_3_0, dvs_r_2_0, bgr_r_2_0], dim=1))
        up_dep_f_2_1 = self.up(dep_f_2_1)
        up_dep_l_2_1 = self.up(dep_l_2_1)
        up_dep_ri_2_1 = self.up(dep_ri_2_1)
        up_dep_r_2_1 = self.up(dep_r_2_1)
        up_seg_f_2_1 = self.up(seg_f_2_1)
        up_seg_l_2_1 = self.up(seg_l_2_1)
        up_seg_ri_2_1 = self.up(seg_ri_2_1)
        up_seg_r_2_1 = self.up(seg_r_2_1)
        dep_f_1_2 = self.conv1_2_dep_f(cat([up_dep_f_2_1, dvs_f_1_0, bgr_f_1_0], dim=1))
        dep_l_1_2 = self.conv1_2_dep_l(cat([up_dep_l_2_1, dvs_l_1_0, bgr_l_1_0], dim=1))
        dep_ri_1_2 = self.conv1_2_dep_ri(cat([up_dep_ri_2_1, dvs_ri_1_0, bgr_ri_1_0], dim=1))
        dep_r_1_2 = self.conv1_2_dep_r(cat([up_dep_r_2_1, dvs_r_1_0, bgr_r_1_0], dim=1))
        seg_f_1_2 = self.conv1_2_seg_f(cat([up_seg_f_2_1, dvs_f_1_0, bgr_f_1_0], dim=1))
        seg_l_1_2 = self.conv1_2_seg_l(cat([up_seg_l_2_1, dvs_l_1_0, bgr_l_1_0], dim=1))
        seg_ri_1_2 = self.conv1_2_seg_ri(cat([up_seg_ri_2_1, dvs_ri_1_0, bgr_ri_1_0], dim=1))
        seg_r_1_2 = self.conv1_2_seg_r(cat([up_seg_r_2_1, dvs_r_1_0, bgr_r_1_0], dim=1))
        up_dep_f_1_2 = self.up(dep_f_1_2)
        up_dep_l_1_2 = self.up(dep_l_1_2)
        up_dep_ri_1_2 = self.up(dep_ri_1_2)
        up_dep_r_1_2 = self.up(dep_r_1_2)
        up_seg_f_1_2 = self.up(seg_f_1_2)
        up_seg_l_1_2 = self.up(seg_l_1_2)
        up_seg_ri_1_2 = self.up(seg_ri_1_2)
        up_seg_r_1_2 = self.up(seg_r_1_2)
        dep_f_0_3 = self.conv0_3_dep_f(cat([up_dep_f_1_2, dvs_f_0_0, bgr_f_0_0], dim=1))
        dep_l_0_3 = self.conv0_3_dep_l(cat([up_dep_l_1_2, dvs_l_0_0, bgr_l_0_0], dim=1))
        dep_ri_0_3 = self.conv0_3_dep_ri(cat([up_dep_ri_1_2, dvs_ri_0_0, bgr_ri_0_0], dim=1))
        dep_r_0_3 = self.conv0_3_dep_r(cat([up_dep_r_1_2, dvs_r_0_0, bgr_r_0_0], dim=1))
        seg_f_0_3 = self.conv0_3_seg_f(cat([up_seg_f_1_2, dvs_f_0_0, bgr_f_0_0], dim=1))
        seg_l_0_3 = self.conv0_3_seg_l(cat([up_seg_l_1_2, dvs_l_0_0, bgr_l_0_0], dim=1))
        seg_ri_0_3 = self.conv0_3_seg_ri(cat([up_seg_ri_1_2, dvs_ri_0_0, bgr_ri_0_0], dim=1))
        seg_r_0_3 = self.conv0_3_seg_r(cat([up_seg_r_1_2, dvs_r_0_0, bgr_r_0_0], dim=1))

        #final
        out_dep_f = self.act_dep(self.final_dep_f(dep_f_0_3))
        out_dep_l = self.act_dep(self.final_dep_l(dep_l_0_3))
        out_dep_ri = self.act_dep(self.final_dep_ri(dep_ri_0_3))
        out_dep_r = self.act_dep(self.final_dep_r(dep_r_0_3))
        out_seg_f = self.act_seg(self.final_seg_f(seg_f_0_3))
        out_seg_l = self.act_seg(self.final_seg_l(seg_l_0_3))
        out_seg_ri = self.act_seg(self.final_seg_ri(seg_ri_0_3))
        out_seg_r = self.act_seg(self.final_seg_r(seg_r_0_3))


        return [out_dep_f, out_dep_l, out_dep_ri, out_dep_r, out_seg_f, out_seg_l, out_seg_ri, out_seg_r]

